pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  solution: '**/*.sln'

steps: 

- task: GitVersion@5
  inputs:
    runtime: 'core'

- task: DotNetCoreInstaller@0
  displayName: 'Use .NET Core sdk 2.2.104' 
  inputs: 
    version: 2.2.104

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration) /p:Version=$(GitVersion.NuGetVersion)'
    projects: 'src/SlugHub.csproj'
    versioningScheme: byBuildNumber

# Run tests and create coverage report
- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
#    projects: '$(Parameters.TestProjects)'
    projects: '**/*[Tt]ests/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --no-build /p:AltCover=true /p:AltCoverForce=true /p:AltCoverCallContext=[Fact] /p:AltCoverXmlReport=..\target\reports\coverage\coverage.opencover.xml --collect "Code Coverage"'

- task: DotNetCoreCLI@2
  displayName: "dotnet pack"
  inputs:
    command: 'pack'
    arguments: '--configuration $(buildConfiguration)'
    packagesToPack: 'src/SlugHub.csproj'
    nobuild: true
    versioningScheme: byEnvVar 
    versionEnvVar: GitVersion.NuGetVersion

- task: CopyFiles@2
  displayName: 'Copy *.nupkg Files'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: '**\*.nupkg'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\Package'
    flattenFolders: true
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

# Publish
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\Package'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
